name: Build release

on:
  workflow_dispatch:
    inputs:
      releaseTitle:
        description: "Release title"
        required: true
      tagVersion:
        description: "Tag version"
        required: true

jobs:
  windowsBuild:
    name: Build for Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: NPM Install
        run: "npm install"
      - name: NPM Release
        run: "npm run release"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish release as artifect
        uses: actions/upload-artifact@v2
        with:
          name: windows-release
          path: dist
  linuxBuild:
    name: Build for Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: NPM Install
        run: "npm install"
      - name: NPM Release
        run: "npm run release"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish release as artifect
        uses: actions/upload-artifact@v2
        with:
          name: linux-release
          path: dist
  macBuild:
    name: Build for Mac
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: NPM Install
        run: "npm install"
      - name: NPM Release
        run: "npm run release"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish release as artifect
        uses: actions/upload-artifact@v2
        with:
          name: mac-release
          path: dist

  createRelease:
    name: Create the release
    runs-on: ubuntu-latest
    needs: [windowsBuild, linuxBuild, macBuild]
    steps:
      - name: Create a Release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # The name of the tag. This should come from the webhook payload, `github.GITHUB_REF` when a user pushes a new tag
          tag_name: ${{ github.event.inputs.tagVersion }}
          # The name of the release. For example, `Release v1.0.1`
          release_name: ${{ github.event.inputs.releaseTitle }}
          commitish: master
          draft: true
      - name: Publish to release
        uses: actions/upload-release-asset@v1.0.2
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./dist/*.exe
          asset_name: "Servicebus Browser.exe"
          asset_content_type: application/exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
