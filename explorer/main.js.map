{"version":3,"sources":["fs (ignored)","net (ignored)","tls (ignored)","./src/app/connections/ngrx/connections.actions.ts","./src/app/ngrx.module.ts","./src/app/ui/menubar/menubar.component.ts","./src/app/ui/menubar/menubar.component.html","./src/app/connections/ngrx/connections.reducers.ts","./src/app/connections/connection-plane/connection-plane.component.ts","./src/app/connections/connection-plane/connection-plane.component.html","./src/environments/environment.ts","./src/app/ui/sidebar/sidebar.component.ts","./src/app/ui/sidebar/sidebar.component.html","./src/app/connections/connections-routing.module.ts","./src/app/connections/edit/edit.component.ts","./src/app/connections/edit/edit.component.html","./src/app/ui/console/console.component.ts","./src/app/ui/console/console.component.html","./src/app/connections/servicebus-connection.effects.ts","./src/app/ui/menu-item/menu-item.component.ts","./src/app/ui/menu-item/menu-item.component.html","./src/app/connections/connections.module.ts","./src/app/connections/servicebus-connection.service.ts","./src/app/connections/connection-plane-item/connection-plane-item.component.ts","./src/app/connections/connection-plane-item/connection-plane-item.component.html","./src/app/ui/submenu-item/submenu-item.component.ts","./src/app/ui/submenu-item/submenu-item.component.html","./src/app/connections/ngrx/connections.selectors.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/connections/ngrx/connections.models.ts","./src/app/ui/ui.module.ts","./src/app/app-routing.module.ts","./src/app/main/main.component.ts","./src/app/main/main.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["/* (ignored) */","/* (ignored) */","/* (ignored) */","import { createAction, props } from \"@ngrx/store\";\nimport { IConnection } from \"./connections.models\";\n\n// basic connection operations\nexport const createConnection = createAction('[Connection] create a empty connection and load it as selected');\nexport const selectConnection = createAction('[connection] load an exsiting connection as selected', props<{id: string}>());\nexport const deleteConnection = createAction('[Connection] Delete a specified connection', props<{id: string}>());\n\n// selected connection operations\nexport const storeSelectedConnection = createAction('[Connection/Selected] store the selected connection and clear the selection');\nexport const clearSelectedConnection = createAction('[Connection/Selected] clear the currently selected connection');\nexport const setSelectedConnectionName = createAction('[Connection/Selected] Set the name of the selected connection', props<{name: string}>());\nexport const testConnection = createAction('[Connection/Selected] Test a given connection');\nexport const testConnectionFailed = createAction('[Connection/Selected] Test of given connection failed', props<{error: string}>());\nexport const testConnectionSuccess = createAction('[Connection/Selected] Test of given connection success');","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { IConnectionsState } from './connections/ngrx/connections.reducers';\n\nexport interface State {\n  connectionState: IConnectionsState;\n}\n\n@NgModule({\n  declarations: [],\n  imports: [\n    StoreModule.forRoot({})\n  ]\n})\nexport class NgrxModule { }\n","import { Component, OnInit, ViewEncapsulation, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'app-menubar',\n  templateUrl: './menubar.component.html',\n  styleUrls: ['./menubar.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MenubarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"container\">\n    <ng-content></ng-content>\n</div>","import { createReducer, on } from \"@ngrx/store\";\nimport { v4 as uuidv4 } from 'uuid';\nimport * as actions from \"./connections.actions\";\nimport { ConnectionType, IConnection } from \"./connections.models\";\n\nexport interface IConnectionsState {\n    connections: IConnection[];\n    selectedConnection: IConnection | null\n}\n\nconst initialState: IConnectionsState = {\n    connections: [],\n    selectedConnection: null\n}\n\nexport const connectionReducer = createReducer<IConnectionsState>(\n    initialState,\n    on(actions.createConnection, (state) => {\n        return {\n            ...state,\n            selectedConnection: {\n                id: undefined,\n                name: '',\n                testSuccess: null,\n                connectionType: ConnectionType.connectionString,\n                connectionDetails: {\n                    connetionString: ''\n                }\n            }\n        }\n    }),\n    on(actions.clearSelectedConnection, (state) => {\n        return {\n            ...state,\n            selectedConnection: null\n        }\n    }),\n    on(actions.selectConnection, (state, action) => {\n        return {\n            ...state,\n            selectedConnection: state.connections.find(c => c.id === action.id) ?? null\n        }\n    }),\n    on(actions.deleteConnection, (state, action) => {\n        return {\n            ...state,\n            connections: state.connections.filter(c => c.id !== action.id)\n        }\n    }),\n    // selected connections\n    on(actions.storeSelectedConnection, (state) => {\n        if (state.selectedConnection === null) {\n            return state;\n        }\n\n        return {\n            ...state,\n            connections: [\n                ...state.connections.filter(c => c.id != state.selectedConnection?.id),\n                {\n                    ...state.selectedConnection,\n                    id: state.selectedConnection.id === undefined ? uuidv4() : state.selectedConnection.id\n                }\n            ],\n            selectedConnection: null\n        }\n    }),\n    on(actions.setSelectedConnectionName, (state, action) => {\n        if (state.selectedConnection === null) {\n            return state;\n        }\n\n        return {\n            ...state,\n            selectedConnection: {\n                ...state.selectedConnection,\n                name: action.name\n            }\n        }\n    }),\n    on(actions.testConnectionSuccess, (state) => {\n        if (state.selectedConnection === null) {\n            return state;\n        }\n\n        return {\n            ...state,\n            selectedConnection: {\n                ...state.selectedConnection,\n                testSuccess: true,\n                error: ''\n            }\n        }\n    }),\n    on(actions.testConnectionFailed, (state, action) => {\n        if (state.selectedConnection === null) {\n            return state;\n        }\n\n        return {\n            ...state,\n            selectedConnection: {\n                ...state.selectedConnection,\n                testSuccess: false,\n                error: action.error\n            }\n        }\n    })\n)","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { State } from 'src/app/ngrx.module';\nimport { IConnection } from '../ngrx/connections.models';\nimport { getConnections } from '../ngrx/connections.selectors';\nimport {SubSink} from 'subsink';\n\n@Component({\n  selector: 'app-connection-plane',\n  templateUrl: './connection-plane.component.html',\n  styleUrls: ['./connection-plane.component.scss']\n})\nexport class ConnectionPlaneComponent implements OnInit, OnDestroy {\n  public connections: IConnection[] = [];\n  public subs = new SubSink();\n\n  constructor(\n    private store: Store<State>\n  ) { }\n\n  ngOnInit(): void {\n    this.subs.add(this.store.select(getConnections).subscribe(c => this.connections = c));\n  }\n\n  ngOnDestroy(): void {\n    this.subs.unsubscribe();\n  }\n}\n","<app-connection-plane-item [connection]=\"connection\" *ngFor=\"let connection of connections\"></app-connection-plane-item>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit, ViewEncapsulation, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'app-sidebar',\n  templateUrl: './sidebar.component.html',\n  styleUrls: ['./sidebar.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SidebarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"sidebar\">\n    <ng-content></ng-content>\n</div>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { EditComponent } from './edit/edit.component';\n\nconst routes: Routes = [{ path: 'edit', component: EditComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ConnectionsRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { State } from '../../ngrx.module';\nimport { clearSelectedConnection, createConnection, setSelectedConnectionName, storeSelectedConnection, testConnection } from '../ngrx/connections.actions';\nimport { IConnection } from '../ngrx/connections.models';\nimport { getSelectedConnection } from '../ngrx/connections.selectors';\n\n@Component({\n  templateUrl: './edit.component.html',\n  styleUrls: ['./edit.component.scss']\n})\nexport class EditComponent implements OnInit {\n  selectedConnection: IConnection | null = null;\n\n  constructor(\n    private store: Store<State>,\n    private router: Router\n    ) { }\n\n  ngOnInit(): void {\n    // TODO: Unsubscribe\n    this.store.select(getSelectedConnection).subscribe(s => {\n      this.selectedConnection = s;\n      if (this.selectedConnection == null) {\n        this.store.dispatch(createConnection());\n      }\n    })\n  }\n\n  onNameChange($event: Event) {\n    const element = $event.target as HTMLInputElement;\n    this.store.dispatch(setSelectedConnectionName({\n      name: element.value\n    }))\n  }\n\n  test() {\n    if (this.selectedConnection !== null) {\n      this.store.dispatch(testConnection())\n    }\n  }\n\n  save() {\n    this.store.dispatch(storeSelectedConnection());\n    this.router.navigateByUrl('/');\n  }\n\n  cancel() {\n    this.store.dispatch(clearSelectedConnection());\n    this.router.navigateByUrl('/');\n  }\n}\n","<div><a (click)=\"cancel()\">Cancel</a></div>\n<div *ngIf=\"selectedConnection !== null\">\n    <input type=\"text\" [value]=\"selectedConnection.name\" (change)=\"onNameChange($event)\" />\n    <button (click)=\"test()\" [disabled]=\"selectedConnection.testSuccess\">Test</button>\n    <button (click)=\"save()\" [disabled]=\"!selectedConnection.testSuccess\">Save</button>\n</div>","import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input, Output, OnChanges, SimpleChanges, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\nimport { faChevronDown, faChevronLeft, IconDefinition } from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n  selector: 'app-console',\n  templateUrl: './console.component.html',\n  styleUrls: ['./console.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ConsoleComponent implements OnChanges, AfterViewInit {\n  @Input()\n  @Output()\n  public open: boolean = false;\n\n  @Input()\n  public logLines: string[] = [];\n\n  @ViewChild('logPlane', {static: true})\n  public logPlane: ElementRef | undefined;\n\n  public get icon(): IconDefinition { \n    return this.open ? faChevronDown : faChevronLeft;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.scrollToBottom();\n  }\n\n  ngAfterViewInit(): void {\n    this.scrollToBottom();\n  }\n\n  private scrollToBottom() {\n    if (this.logPlane != undefined) {\n      this.logPlane.nativeElement.scrollTop = this.logPlane.nativeElement.scrollHeight;\n    }\n  }\n\n  public toggleOpen(): void {\n    this.open = !this.open;\n  }\n}\n","<div class=\"consoleplane\">\n    <div class=\"topbar\" (click)=\"toggleOpen()\">\n        <span>Console</span>\n        <div class=\"space\"></div>\n        <fa-icon [icon]=\"icon\" size=\"1x\"></fa-icon>\n    </div>\n    <div class=\"consoletext\" [ngClass]=\"{'open': open}\" #logPlane>\n        <div class=\"consoleline\" *ngFor=\"let line of logLines\">\n            {{line}}\n        </div>\n    </div>\n</div>","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { catchError, map, mergeMap, withLatestFrom } from 'rxjs/operators'\nimport { ServicebusConnectionService } from './servicebus-connection.service';\nimport * as actions from \"./ngrx/connections.actions\";\nimport { of } from 'rxjs';\nimport { State } from '../ngrx.module';\nimport { Store } from '@ngrx/store';\nimport { getSelectedConnection } from './ngrx/connections.selectors';\n\n@Injectable()\nexport class ServicebusConnectionEffects {\n\n  constructor\n  (\n    private actions$: Actions,\n    private servicebusConnection: ServicebusConnectionService,\n    private store: Store<State>,\n  ) {  }\n\n  testConnections$ = createEffect(() => {\n    return this.actions$.pipe(\n      // listen for the type of testConnection\n      ofType(actions.testConnection),\n      // retreive the currently selected connection\n      withLatestFrom(this.store.select(getSelectedConnection)),\n\n      // execute the test and return the result\n      mergeMap(([action, connection]) => {\n        if (connection === null) {\n          return of(actions.testConnectionFailed({error: 'selectedConnection is empty'}))\n        }\n        \n        return this.servicebusConnection.testConnection(connection)\n        .pipe(\n          map(() => actions.testConnectionSuccess()),\n          catchError(error => of(actions.testConnectionFailed({ error: error as string })))\n        )\n      })\n    )\n  });\n}\n","import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input, Output, HostListener, ElementRef } from '@angular/core';\n\n@Component({\n  selector: 'app-menu-item',\n  templateUrl: './menu-item.component.html',\n  styleUrls: ['./menu-item.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MenuItemComponent {\n  @Input()\n  @Output()\n  public showSubmenu: boolean = false;\n  @Input()\n  public name: string = \"\";\n\n  constructor() {\n  }\n\n  @HostListener('document:click', ['$event'])\n  clickout(event: Event) {\n    this.showSubmenu = false;\n  }\n\n  public toggleShowSubMenu($event: Event): void {\n    this.showSubmenu = !this.showSubmenu;\n    $event.stopPropagation();\n  }\n}\n","<div class=\"menu-item\" (click)=\"toggleShowSubMenu($event)\">\n    <span>{{name}}</span>\n</div>\n\n<div class=\"sub-menu\" [ngClass]=\"{'show': showSubmenu }\">\n    <ng-content></ng-content>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConnectionsRoutingModule } from './connections-routing.module';\nimport { EditComponent } from './edit/edit.component';\nimport { ConnectionPlaneComponent } from './connection-plane/connection-plane.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { ConnectionPlaneItemComponent } from './connection-plane-item/connection-plane-item.component';\nimport { EffectsModule } from '@ngrx/effects';\nimport { ServicebusConnectionEffects } from './servicebus-connection.effects';\nimport { connectionReducer } from './ngrx/connections.reducers';\nimport { StoreModule } from '@ngrx/store';\n\n@NgModule({\n  declarations: [\n    EditComponent,\n    ConnectionPlaneComponent,\n    ConnectionPlaneItemComponent\n  ],\n  imports: [\n    CommonModule,\n    ConnectionsRoutingModule,\n    FontAwesomeModule,\n    StoreModule.forFeature('connections', connectionReducer),\n    EffectsModule.forFeature([ServicebusConnectionEffects])\n  ],\n  exports: [\n    ConnectionPlaneComponent\n  ]\n})\nexport class ConnectionsModule { }\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { ConnectionType, IConnection, IConnectionStringConnectionDetails } from './ngrx/connections.models';\nimport { ServiceBusClient } from '@azure/service-bus';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServicebusConnectionService {\n\n  constructor() { }\n\n  testConnection(connection: IConnection): Observable<IConnection> {\n    try {\n      const client = this.initClient(connection);\n      //client.close();\n      return of(connection);\n    } catch (e) {\n      if (e.constructor.name === 'Error') {\n        const error = e as Error;\n        return throwError(error.message);\n      } else {\n        return throwError('test failed because of unknown reason');\n      }\n    }\n\n  }\n\n  private initClient(connection: IConnection): ServiceBusClient {\n    switch(connection.connectionType) {\n      case ConnectionType.connectionString:\n        const connectionDetails = connection.connectionDetails as IConnectionStringConnectionDetails;\n        return new ServiceBusClient(connectionDetails.connetionString);\n      default:\n        throw new Error(\"Connection type not supported yet, cannot create client\");\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { faEdit } from '@fortawesome/free-solid-svg-icons';\nimport { Store } from '@ngrx/store';\nimport { State } from 'src/app/ngrx.module';\nimport { selectConnection } from '../ngrx/connections.actions';\nimport { IConnection } from '../ngrx/connections.models';\n\n@Component({\n  selector: 'app-connection-plane-item',\n  templateUrl: './connection-plane-item.component.html',\n  styleUrls: ['./connection-plane-item.component.scss']\n})\nexport class ConnectionPlaneItemComponent {\n  public faEdit = faEdit;\n\n  @Input()\n  connection: IConnection | undefined;\n\n  constructor(\n    private store: Store<State>,\n    private router: Router\n  ) { }\n\n  edit(connection: IConnection | undefined) {\n    if (connection === undefined) {\n      return;\n    }\n\n    this.store.dispatch(selectConnection({\n      id: connection.id as string\n    }));\n    this.router.navigate(['connections', 'edit'])\n  }\n}\n","<div class=\"connection\">\n    <div class=\"title\">\n        <span>{{connection?.name}}</span>\n        <div class=\"space\"></div>\n        <a (click)=\"edit(connection)\"><fa-icon [icon]=\"faEdit\"></fa-icon></a>\n    </div>\n</div>","import { Component, OnInit, ViewEncapsulation, ChangeDetectionStrategy, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-submenu-item',\n  templateUrl: './submenu-item.component.html',\n  styleUrls: ['./submenu-item.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SubmenuItemComponent {\n\n  @Input()\n  public name: string = \"\";\n}\n","<span class=\"submenu-item\">{{name}}</span>","import { createFeatureSelector, createSelector } from \"@ngrx/store\";\nimport { IConnectionsState } from \"./connections.reducers\";\n\nconst getConnectionsFeatureState = createFeatureSelector<IConnectionsState>('connections');\n\nexport const getConnections = createSelector(\n    getConnectionsFeatureState,\n    state => state.connections\n)\n\nexport const getSelectedConnection = createSelector(\n    getConnectionsFeatureState,\n    state => state.selectedConnection\n)","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { createConnection } from './connections/ngrx/connections.actions';\nimport { State } from './ngrx.module';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'Servicebus Browser';\n  logs = [\n   'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod',\n   'tempor incididunt ut labore et dolore magna aliqua. Phasellus faucibus',\n   'scelerisque eleifend donec pretium vulputate sapien nec sagittis. Feugiat',\n   'nibh sed pulvinar proin. Ac ut consequat semper viverra nam libero justo',\n   'laoreet. Risus sed vulputate odio ut enim blandit. Auctor elit sed vulputate',\n   'mi sit amet. Lorem donec massa sapien faucibus et. Velit euismod in',\n   'pellentesque massa placerat duis ultricies. Massa vitae tortor',\n   'condimentum lacinia quis vel. Auctor neque vitae tempus quam',\n   'pellentesque nec. In aliquam sem fringilla ut morbi tincidunt augue',\n   'interdum velit. Elit ullamcorper dignissim cras tincidunt. Feugiat in',\n   'fermentum posuere urna nec tincidunt praesent. Nulla aliquet porttitor',\n   'lacus luctus accumsan. Id diam vel quam elementum pulvinar etiam non',\n   'quam lacus. Quis viverra nibh cras pulvinar mattis nunc.',\n   'Tempor id eu nisl nunc mi ipsum faucibus vitae. Blandit cursus risus at',\n   'ultrices. Consequat id porta nibh venenatis cras. Vel quam elementum',\n   'pulvinar etiam. Quam quisque id diam vel quam elementum. Quis enim',\n   'lobortis scelerisque fermentum dui faucibus in ornare. At lectus urna duis',\n   'convallis convallis tellus id interdum velit. Lectus mauris ultrices eros in',\n  ];\n\n  constructor(\n    private store: Store<State>,\n    private router: Router\n  ) {}\n\n  connectPressed(): void {\n    this.store.dispatch(createConnection());\n    this.router.navigate([\"connections\", \"edit\"])\n  }\n}\n","<app-menubar>\n    <app-menu-item name=\"Config\">\n        <app-submenu-item name=\"Connect\" (click)=\"connectPressed()\"></app-submenu-item>\n    </app-menu-item>\n</app-menubar>\n\n<div class=\"body\">\n    <app-sidebar>\n        <app-connection-plane></app-connection-plane>\n    </app-sidebar>\n    <div class=\"wrapper\">\n        <div class=\"view\">\n            <router-outlet></router-outlet>\n        </div>\n        <app-console [logLines]=\"logs\"></app-console>\n    </div>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { environment } from '../environments/environment';\nimport { UiModule } from './ui/ui.module';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { MainComponent } from './main/main.component';\nimport { NgrxModule } from './ngrx.module';\nimport { ConnectionsModule } from './connections/connections.module';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreRouterConnectingModule } from '@ngrx/router-store';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MainComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    NgrxModule,\n    ServiceWorkerModule.register('ngsw-worker.js', { enabled: environment.production }),\n    UiModule,\n    FontAwesomeModule,\n    ConnectionsModule,\n    StoreDevtoolsModule.instrument({ name: \"Servicebus Browser\", maxAge: 25, logOnly: environment.production }),\n    EffectsModule.forRoot([]),\n    StoreRouterConnectingModule.forRoot()\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export interface IConnection {\n    id: string|undefined;\n    name: string;\n    testSuccess: boolean | null;\n    connectionType: ConnectionType;\n    connectionDetails: IConnectionStringConnectionDetails | IAADTokenCredentialsConnectionDetails\n}\n\nexport enum ConnectionType {\n    connectionString,\n    AADTokenCredentials\n}\n\nexport interface IConnectionStringConnectionDetails {\n    connetionString: string\n}\n\nexport interface IAADTokenCredentialsConnectionDetails {\n    \n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MenubarComponent } from './menubar/menubar.component';\nimport { MenuItemComponent } from './menu-item/menu-item.component';\nimport { SubmenuItemComponent } from './submenu-item/submenu-item.component';\nimport { SidebarComponent } from './sidebar/sidebar.component';\nimport { ConsoleComponent } from './console/console.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\n\n@NgModule({\n  declarations: [\n    MenubarComponent,\n    MenuItemComponent,\n    SubmenuItemComponent,\n    SidebarComponent,\n    ConsoleComponent\n  ],\n  imports: [\n    CommonModule,\n    FontAwesomeModule\n  ],\n  exports: [\n    MenubarComponent,\n    MenuItemComponent,\n    SubmenuItemComponent,\n    SidebarComponent,\n    ConsoleComponent,\n  ]\n})\nexport class UiModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { MainComponent } from './main/main.component';\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: MainComponent\n  },\n  {\n    path: \"connections\",\n    loadChildren: () => import('./connections/connections-routing.module').then(m => m.ConnectionsRoutingModule)\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.scss']\n})\nexport class MainComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>main works!</p>\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}